'use strict';

const path = require('path');

const buntstift = require('buntstift'),
      pick = require('lodash/pick'),
      sample = require('lodash/sample'),
      stripIndent = require('common-tags/lib/stripIndent');

const artefacts = require('../artefacts'),
      files = require('../files'),
      shell = require('../shell');

const componentKeys = [
  // Base versions.
  'cli', 'docker', 'node', 'vagrant',

  // Browser versions.
  'chrome', 'firefox', 'safari', 'edge', 'ie',

  // SDK versions.
  'clientSdkJs', 'depotClientSdkJs'
];

const updateDockerfile = async function ({ cwdDocumentation, versions }) {
  const filename = path.join(cwdDocumentation, 'Dockerfile');
  const dockerfile = await files.read(filename);

  const updatedDockerfile = dockerfile.replace(/FROM thenativeweb\/wolkenkit-box-node:\d+\.\d+\.\d+/ug, `FROM thenativeweb/wolkenkit-box-node:${versions.wolkenkit}`);

  await files.write(filename, updatedDockerfile);
};

const setComponentVersions = async function ({ cwdDocumentation, versions }) {
  const latestVersions = JSON.stringify(pick(versions, componentKeys), null, 2);

  const filenameLatestVersions = path.join(cwdDocumentation, 'lib', 'docs', 'latest', 'versions-autogenerated.json');

  await files.write(filenameLatestVersions, latestVersions);
};

const addRuntimeVersion = async function ({ cwdDocumentation, versions }) {
  const filename = path.join(cwdDocumentation, 'lib', 'docs', 'versions-autogenerated.json');
  const runtimeVersions = JSON.parse(await files.read(filename));

  const [ latest, ...rest ] = runtimeVersions;

  const newRuntimeVersions = [ latest, versions.wolkenkit, ...rest ];

  await files.write(filename, JSON.stringify(newRuntimeVersions, null, 2));
};

const updateNews = async function ({ cwdDocumentation, versions, description }) {
  const newsFile = path.join(cwdDocumentation, 'static', 'news.json');
  const news = JSON.parse(await files.read(newsFile));

  const emojis = [ 'ðŸ¦„', 'ðŸŽ‰', 'ðŸŽŠ', 'ðŸŒŸ', 'ðŸŒˆ', 'ðŸ˜Š' ];
  const now = new Date();

  news.unshift({
    date: {
      year: now.getFullYear(),
      month: now.getMonth() + 1,
      day: now.getDate()
    },
    title: `Released wolkenkit ${versions.wolkenkit} ${sample(emojis)}`,
    content: `Today, we have released wolkenkit ${versions.wolkenkit}. ${description} For details see the [changelog](https://docs.wolkenkit.io/${versions.wolkenkit}/getting-started/updating-wolkenkit/changelog/).`
  });

  await files.write(newsFile, JSON.stringify(news, null, 2));
};

const updateUpdatingAnApplication = async function ({ cwdDocumentation, versions }) {
  const filename = path.join(cwdDocumentation, 'lib', 'docs', 'latest', 'getting-started', 'updating-wolkenkit', 'updating-an-application', 'index.md');

  const content = stripIndent`
    # Updating an application

    To update an application to the current version of wolkenkit follow the steps given below.

    ## package.json

    **Previous version (${versions.wolkenkit})**

    \`\`\`json
    "wolkenkit": {
      "application": "your-app",
      "runtime": {
        "version": "${versions.wolkenkit}"
      },
      "...": "..."
    }
    \`\`\`

    **Current version (<%= current.version %>)**

    \`\`\`json
    "wolkenkit": {
      "application": "your-app",
      "runtime": {
        "version": "<%= current.version %>"
      },
      "...": "..."
    }
    \`\`\`
  `;

  await files.write(filename, content);
};

const updateChangelog = async function ({ cwdDocumentation, versions }) {
  const filename = path.join(cwdDocumentation, 'lib', 'docs', 'latest', 'getting-started', 'updating-wolkenkit', 'changelog', 'index.md');
  const changelog = await files.read(filename);

  const updatedChangelog = changelog.replace(/<%= current\.version %>/ug, versions.wolkenkit);

  const [ title,, subtitle,, ...rest ] = updatedChangelog.split('\n');

  const newChangelog = [
    title,
    '',
    subtitle,
    '',
    stripIndent`
      ## <%= current.version %>

      The following significant changes have been made since wolkenkit \`${versions.wolkenkit}\`:

      - **Added** ...
        - For details see ...
      - **Contributions** by the community
        - [@...](https://github.com/...)

      For details on how to update to version \`<%= current.version %>\` see [updating the CLI](../../../../<%= current.version %>/getting-started/updating-wolkenkit/updating-the-cli/) and [updating an application](../../../../<%= current.version %>/getting-started/updating-wolkenkit/updating-an-application/).
    `,
    '',
    ...rest
  ];

  await files.write(filename, newChangelog.join('\n'));
};

const updateDocumentation = async function ({ versions, description, cwd }) {
  if (!versions) {
    throw new Error('Versions are missing.');
  }
  componentKeys.forEach(componentKey => {
    if (!versions[componentKey]) {
      throw new Error(`${componentKey} version is missing.`);
    }
  });
  if (!description) {
    throw new Error('Description is missing.');
  }
  if (!cwd) {
    throw new Error('Current working directory is missing.');
  }

  buntstift.header('Updating documentation...');

  for (let i = 0; i < artefacts.documentation.length; i++) {
    const artefact = artefacts.documentation[i];

    const cwdDocumentation = path.join(cwd, artefact.repository);

    await updateDockerfile({ cwdDocumentation, versions });
    await setComponentVersions({ cwdDocumentation, versions });

    await shell.copyDirectory({
      source: `${path.join(cwdDocumentation, 'lib', 'docs', 'latest')}`,
      destination: `${path.join(cwdDocumentation, 'lib', 'docs', versions.wolkenkit)}`
    });

    await addRuntimeVersion({ cwdDocumentation, versions });
    await updateNews({ cwdDocumentation, versions, description });
    await updateChangelog({ cwdDocumentation, versions });
    await updateUpdatingAnApplication({ cwdDocumentation, versions });

    await shell.execLive('git add Dockerfile', { cwd: cwdDocumentation });
    await shell.execLive(`git commit -m 'Update base image to version ${versions.wolkenkit}.'`, { cwd: cwdDocumentation });

    await shell.execLive('git add .', { cwd: cwdDocumentation });
    await shell.execLive(`git commit -m 'Build documentation.'`, { cwd: cwdDocumentation });

    await shell.execLive('npx roboter build', { cwd: cwdDocumentation });
    await shell.execLive(`docker tag thenativeweb/${artefact.image}:latest thenativeweb/${artefact.image}:${versions.wolkenkit}`, { cwd: cwdDocumentation });
  }
};

module.exports = updateDocumentation;
